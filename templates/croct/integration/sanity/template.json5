{
  "$schema": "https://schema.croct.com/json/v1/catalog-template.json",
  "title": "Sanity CMS integration",
  "description": "An integration template for projects using Croct and Sanity.",
  "metadata": {
    "id": "integration/cms/sanity",
    "verified": true,
    "ecosystem": {
      "name": "Croct",
      "avatarUrl": "https://github.com/croct-tech.png",
      "websiteUrl": "https://croct.com"
    },
    "documentationUrl": "https://github.com/croct-tech/templates/blob/master/templates/croct/integration/sanity/README.md",
    "sourceUrl": "https://github.com/croct-tech/templates/blob/master/templates/croct/integration/sanity/template.json5",
    "coverImageUrl": "https://github.com/croct-tech/templates/blob/master/templates/croct/integration/sanity/cover.png",
    "installationUrl": "croct://integration/sanity",
    "categories": [
      "boilerplate/starter",
      "framework/nextjs",
      "framework/react",
      "integration/cms",
      "language/javascript",
      "language/typescript"
    ],
    "relatedTemplates": [
      "boilerplate/starter/nextjs",
      "integration/cms/sanity-ab-testing",
      "integration/cms/sanity-personalization"
    ]
  },
  "options": {
    "extension": {
      "type": "string",
      "description": "The URL of the extension template to apply."
    }
  },
  "actions": [
    {
      "name": "define",
      "variables": {
        "projectName": "croct-sanity-project"
      }
    },
    {
      "name": "import",
      "template": "croct://utils/filename-generator",
      "options": {
        "reference": "projectName"
      }
    },
    {
      "name": "execute-package",
      "command": "giget@latest",
      "arguments": [
        "gh:sanity-io/sanity-template-nextjs-clean",
        "${this.projectName}"
      ]
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "debug"
      ],
      "output": "debugOutput"
    },
    {
      "name": "define",
      "variables": {
        "isLoggedOut": "${this.debugOutput.includes('Not logged in')}"
      }
    },
    {
      "name": "repeat",
      "condition": "${this.isLoggedOut}",
      "actions": [
        {
          "name": "test",
          "condition": "${this.isLoggedOut}",
          "then": [
            {
              "name": "execute-package",
              "command": "sanity@latest",
              "arguments": [
                "login"
              ],
              "interactions": true
            },
            {
              "name": "execute-package",
              "command": "sanity@latest",
              "arguments": [
                "debug"
              ],
              "output": "debugOutput"
            },
            {
              "name": "define",
              "variables": {
                "isLoggedOut": "${this.debugOutput.includes('Not logged in')}"
              }
            },
            {
              "name": "test",
              "condition": "${this.isLoggedOut}",
              "then": [
                {
                  "name": "prompt",
                  "type": "confirmation",
                  "default": true,
                  "message": "Failed to log in, try again?",
                  "result": "retryLogin"
                },
                {
                  "name": "test",
                  "condition": "${!this.retryLogin}",
                  "then": [
                    {
                      "name": "fail",
                      "message": "Login canceled."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "change-directory",
      "path": "${this.projectName}"
    },
    {
      "name": "change-directory",
      "path": "studio"
    },
    {
      "name": "install"
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "init",
        "--bare",
        "--create-project",
        "Croct + Sanity starter",
        "--dataset-default"
      ],
      "interactions": [
        {
          "when": "? Select organization:",
          "then": [
            "[enter]"
          ]
        },
        {
          "when": "You can find your project on Sanity Manage",
          "final": true
        }
      ],
      "output": "initOutput"
    },
    {
      "name": "test",
      "condition": "${!this.initOutput.includes('Project ID:') || !this.initOutput.includes('Dataset:')}",
      "then": [
        {
          "name": "fail",
          "message": "Unexpected output from Sanity CLI:\n${this.initOutput}"
        }
      ]
    },
    {
      "name": "define",
      "variables": {
        "projectId": "${this.initOutput.match(/Project ID: (\\S+)/)[1]}",
        "dataset": "${this.initOutput.match(/Dataset: (\\S+)/)[1]}"
      }
    },
    {
      "name": "move-path",
      "path": ".env.example",
      "destination": ".env.local"
    },
    {
      "name": "replace-file-content",
      "files": [
        {
          "path": ".env.local",
          "replacements": [
            {
              "pattern": "SANITY_STUDIO_PROJECT_ID=\"[^\"]*\"",
              "value": "SANITY_STUDIO_PROJECT_ID=\"${this.projectId}\""
            },
            {
              "pattern": "SANITY_DATASET=\"[^\"]*\"",
              "value": "SANITY_DATASET=\"${this.dataset}\""
            }
          ]
        }
      ]
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "cors",
        "add",
        "http://localhost:3000",
        "--no-credentials"
      ]
    },
    {
      "name": "download",
      "source": "./assets/sample-data.tar.gz",
      "destination": "./",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/studio/schemaTypes/documents/heroSection.ts",
      "destination": "src/schemaTypes/documents"
    },
    {
      "name": "download",
      "source": "./code/studio/schemaTypes/index.ts",
      "destination": "src/schemaTypes",
      "overwrite": true
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "dataset",
        "import",
        "sample-data.tar.gz",
        "--replace"
      ],
      "interactions": [
        {
          "when": "Select target dataset",
          "then": [
            "[down]",
            "[enter]"
          ],
          "final": true
        }
      ]
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "schema",
        "extract",
        "--enforce-required-fields"
      ]
    },
    {
      "name": "change-directory",
      "path": "../frontend"
    },
    {
      "name": "replace-file-content",
      "files": [
        {
          "path": "package.json",
          "replacements": [
            {
              "pattern": " --turbopack",
              "value": ""
            }
          ]
        }
      ]
    },
    {
      "name": "add-dependency",
      "dependencies": [
        "@croct/template-ui"
      ]
    },
    {
      "name": "download",
      "source": "./code/generate-read-token.ts",
      "destination": "../",
      "overwrite": true
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "exec",
        "../generate-read-token.ts",
        "--with-user-token",
        "--",
        "${this.projectId}",
        "${this.dataset}"
      ],
      "output": "tokenOutput"
    },
    {
      "name": "define",
      "variables": {
        "token": "${this.tokenOutput.match(/Token: (\\S+)/)[1]}",
      }
    },
    {
      "name": "move-path",
      "path": ".env.example",
      "destination": ".env.local"
    },
    {
      "name": "replace-file-content",
      "files": [
        {
          "path": ".env.local",
          "replacements": [
            {
              "pattern": "NEXT_PUBLIC_SANITY_PROJECT_ID=\"[^\"]*\"",
              "value": "NEXT_PUBLIC_SANITY_PROJECT_ID=\"${this.projectId}\""
            },
            {
              "pattern": "NEXT_PUBLIC_SANITY_DATASET=\"[^\"]*\"",
              "value": "NEXT_PUBLIC_SANITY_DATASET=\"${this.dataset}\""
            },
            {
              "pattern": "SANITY_API_READ_TOKEN=\"[^\"]*\"",
              "value": "SANITY_API_READ_TOKEN=\"${this.token}\""
            }
          ]
        }
      ]
    },
    {
      "name": "execute-package",
      "command": "sanity@latest",
      "arguments": [
        "typegen",
        "generate"
      ]
    },
    {
      "name": "define",
      "variables": {
        "slotId": "",
        "slotVersion": ""
      }
    },
    {
      "name": "download",
      "source": "./code/nextjs/lib/markdown.tsx",
      "destination": "${project.path.utilities}",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/sanity/lib/queries.ts",
      "destination": "sanity/lib",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/app/components/GetStartedCode.tsx",
      "destination": "app/components",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/app/components/Header.tsx",
      "destination": "app/components",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/app/components/Footer.tsx",
      "destination": "app/components",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/app/components/SideBySideIcons.tsx",
      "destination": "app/components",
      "overwrite": true
    },
    {
      "name": "download",
      "source": "./code/nextjs/app/page.tsx",
      "destination": "app",
      "overwrite": true
    },
    {
      "name": "test",
      "condition": "${options.extension !== null}",
      "then": [
        {
          "name": "import",
          "template": "${options.extension}",
          "options": {
            "slotId": "slotId",
            "slotVersion": "slotVersion",
            "pagePath": "app/page.tsx"
          }
        }
      ],
      "else": [
        {
          "name": "create-resource",
          "resources": {
            "components": {
              "hero-section": {
                "name": "Hero section",
                "description": "A hero section serves as the primary visual and informational focus at the top of a webpage.",
                "schema": "${import('./configuration/hero-section-schema.json')}"
              }
            },
            "slots": {
              "home-hero": {
                "name": "Home hero",
                "component": "hero-section",
                "content": {
                  "en": "${import('./configuration/home-hero-slot-content.en.json')}"
                }
              }
            }
          },
          "result": {
            "slots": {
              "home-hero": {
                "id": "slotId",
                "version": "slotVersion"
              }
            }
          }
        }
      ]
    },
    {
      "name": "add-slot",
      "slots": [
        "${this.slotId}"
      ]
    },
    {
      "name": "replace-file-content",
      "files": [
        {
          "path": "app/page.tsx",
          "replacements": [
            {
              "pattern": "%slotId%",
              "value": "${this.slotId}"
            },
            {
              "pattern": "%slotVersion%",
              "value": "${this.slotVersion}"
            },
            {
              "pattern": "%workspaceUrl%",
              "value": "${project.workspace.url}"
            }
          ]
        }
      ]
    },
    {
      "name": "change-directory",
      "path": "../"
    },
    {
      "name": "install"
    },
    {
      "name": "import",
      "template": "croct:/utils/example-launcher",
      "options": {
        "script": "dev",
        "url": "http://localhost:3000"
      }
    }
  ]
}
